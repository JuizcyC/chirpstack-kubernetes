apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
spec:
  serviceName: "postgresql"
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgresql
  template:
    metadata:
      labels:
        io.kompose.service: postgresql
    spec:
      securityContext:
        fsGroup: 999
      initContainers:
        - name: init-postgres
          image: alpine:latest
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -c
            - |
                echo "Cleaning up /var/lib/postgresql/data..."
                rm -rf /var/lib/postgresql/data/* && \
                mkdir -p /var/lib/postgresql/data && \
                chown -R 999:999 /var/lib/postgresql/data && \
                chmod 0750 /var/lib/postgresql/data && \
                echo "Using writable /tmp directory for postgres runtime files..."
                mkdir -p /tmp/postgresql && \
                chown -R 999:999 /tmp/postgresql && \
                chmod 0750 /tmp/postgresql && \
                if [ -d /var/run/postgresql/ ] && [ "$(ls -A /var/run/postgresql/)" ]; then
                  cp -r /var/run/postgresql/* /tmp/postgresql/ && \
                  echo "Copied files to /tmp/postgresql/";
                else
                  echo "/var/run/postgresql/ is empty or does not exist. Skipping copy.";
                fi && \
                echo "Initialization complete."
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresqldata
            - mountPath: /tmp/postgresql
              name: writable-postgres-tmp
      containers:
        - name: postgresql
          image: postgres:14-alpine
          env:
            - name: POSTGRES_PASSWORD
              value: root
            - name: TZ
              value: America/New_York
            - name: PGDATA
              value: /var/lib/postgresql/data
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: true
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresqldata
            - mountPath: /docker-entrypoint-initdb.d
              name: postgres-cm0
            - mountPath: /docker-entrypoint-initdb.d/extra
              name: postgres-cm1
            - mountPath: /var/run/postgresql
              name: writable-postgres-tmp
  volumeClaimTemplates:
    - metadata:
        name: persistent-storage
      spec:
        storageClassName: azurefile-csi-nfs
        accessModes: ["ReadWriteMany"]
        resources:
          requests:
            storage: 4Gi
    - metadata:
        name: writable-postgres-tmp
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
